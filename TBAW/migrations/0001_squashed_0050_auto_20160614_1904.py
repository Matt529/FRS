# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-07-08 21:39
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    replaces = [('TBAW', '0001_initial'), ('TBAW', '0002_auto_20160528_1617'), ('TBAW', '0003_auto_20160528_1620'), ('TBAW', '0004_auto_20160528_1918'), ('TBAW', '0005_auto_20160528_1958'), ('TBAW', '0006_event_teams'), ('TBAW', '0007_auto_20160528_2039'), ('TBAW', '0008_alliance_teams'), ('TBAW', '0009_match_alliances'), ('TBAW', '0010_alliance_color'), ('TBAW', '0011_event_alliances'), ('TBAW', '0012_auto_20160531_2200'), ('TBAW', '0013_remove_match_time_string'), ('TBAW', '0014_auto_20160531_2228'), ('TBAW', '0015_auto_20160531_2230'), ('TBAW', '0016_auto_20160601_1750'), ('TBAW', '0017_auto_20160601_1813'), ('TBAW', '0018_auto_20160601_2147'), ('TBAW', '0019_auto_20160602_1815'), ('TBAW', '0020_scoringmodel_json_data'), ('TBAW', '0021_auto_20160602_2154'), ('TBAW', '0022_auto_20160602_2156'), ('TBAW', '0023_auto_20160602_2217'), ('TBAW', '0024_auto_20160602_2223'), ('TBAW', '0025_auto_20160602_2223'), ('TBAW', '0026_auto_20160602_2230'), ('TBAW', '0027_auto_20160602_2231'), ('TBAW', '0028_auto_20160603_1748'), ('TBAW', '0029_alliance_seed'), ('TBAW', '0030_auto_20160606_1758'), ('TBAW', '0031_auto_20160606_1803'), ('TBAW', '0032_remove_rankingmodel_rank'), ('TBAW', '0033_rankingmodel_rank'), ('TBAW', '0034_rankingmodel2016'), ('TBAW', '0035_rankingmodel2015'), ('TBAW', '0036_auto_20160606_1932'), ('TBAW', '0037_auto_20160607_1850'), ('TBAW', '0038_auto_20160607_2049'), ('TBAW', '0039_auto_20160607_2137'), ('TBAW', '0040_event_end_date'), ('TBAW', '0041_auto_20160607_2315'), ('TBAW', '0042_event_winning_alliance'), ('TBAW', '0043_auto_20160611_1505'), ('TBAW', '0044_allianceappearance'), ('TBAW', '0045_auto_20160611_1837'), ('TBAW', '0046_auto_20160611_1838'), ('TBAW', '0047_auto_20160614_1847'), ('TBAW', '0048_auto_20160614_1902'), ('TBAW', '0049_award_recipient'), ('TBAW', '0050_auto_20160614_1904')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Alliance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('award_type', models.CharField(max_length=120)),
                ('year', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=10)),
                ('name', models.CharField(max_length=500)),
                ('short_name', models.CharField(max_length=120, null=True)),
                ('event_code', models.CharField(max_length=7)),
                ('event_type', models.IntegerField(choices=[(0, 'Regional'), (1, 'District'), (2, 'District Championship'), (3, 'Championship Division'), (4, 'Championship Finals'), (99, 'Offseason'), (100, 'Preseason'), (-1, 'Unlabeled')])),
                ('event_district', models.IntegerField(choices=[(0, 'No District'), (1, 'Michigan'), (2, 'Mid-Atlantic'), (3, 'New England'), (4, 'Pacific Northwest'), (5, 'Indiana'), (6, 'Chesapeake'), (7, 'North Carolina'), (8, 'Georgia')])),
                ('year', models.PositiveIntegerField()),
                ('location', models.CharField(max_length=120)),
                ('venue_address', models.TextField()),
                ('timezone', models.CharField(max_length=20)),
                ('website', models.URLField(null=True)),
                ('official', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='Match',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=20)),
                ('comp_level', models.CharField(max_length=6)),
                ('set_number', models.CharField(max_length=20, null=True)),
                ('match_number', models.CharField(max_length=20)),
                ('time_string', models.CharField(max_length=25)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TBAW.Event')),
            ],
        ),
        migrations.CreateModel(
            name='Robot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=13)),
                ('year', models.PositiveSmallIntegerField()),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('website', models.URLField(null=True)),
                ('name', models.TextField()),
                ('locality', models.CharField(max_length=120, null=True)),
                ('region', models.CharField(max_length=120, null=True)),
                ('country_name', models.CharField(max_length=120, null=True)),
                ('location', models.CharField(max_length=500, null=True)),
                ('team_number', models.PositiveSmallIntegerField()),
                ('key', models.CharField(max_length=8)),
                ('nickname', models.CharField(max_length=120)),
                ('rookie_year', models.PositiveSmallIntegerField(null=True)),
                ('motto', models.TextField(null=True)),
            ],
        ),
        migrations.AddField(
            model_name='award',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='TBAW.Event'),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_district',
            field=models.IntegerField(choices=[(0, 'No District'), (1, 'Michigan'), (2, 'Mid-Atlantic'), (3, 'New England'), (4, 'Pacific Northwest'), (5, 'Indiana'), (6, 'Chesapeake'), (7, 'North Carolina'), (8, 'Georgia')], null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_type',
            field=models.IntegerField(choices=[(0, 'Regional'), (1, 'District'), (2, 'District Championship'), (3, 'Championship Division'), (4, 'Championship Finals'), (99, 'Offseason'), (100, 'Preseason'), (-1, 'Unlabeled')], null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='teams',
            field=models.ManyToManyField(to='TBAW.Team'),
        ),
        migrations.AlterField(
            model_name='event',
            name='location',
            field=models.CharField(max_length=120, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='timezone',
            field=models.CharField(max_length=20, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='venue_address',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='alliance',
            name='teams',
            field=models.ManyToManyField(to='TBAW.Team'),
        ),
        migrations.AddField(
            model_name='match',
            name='alliances',
            field=models.ManyToManyField(to='TBAW.Alliance'),
        ),
        migrations.AddField(
            model_name='alliance',
            name='color',
            field=models.CharField(choices=[('Red', 'Red'), ('Blue', 'Blue')], max_length=4, null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='alliances',
            field=models.ManyToManyField(to='TBAW.Alliance'),
        ),
        migrations.RemoveField(
            model_name='match',
            name='time_string',
        ),
        migrations.AddField(
            model_name='match',
            name='winner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='TBAW.Alliance'),
        ),
        migrations.CreateModel(
            name='ScoringModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('red_total_score', models.SmallIntegerField()),
                ('red_auton_score', models.SmallIntegerField()),
                ('red_teleop_score', models.SmallIntegerField()),
                ('red_foul_score', models.SmallIntegerField()),
                ('red_foul_count', models.SmallIntegerField(default=-1)),
                ('blue_total_score', models.SmallIntegerField()),
                ('blue_auton_score', models.SmallIntegerField()),
                ('blue_teleop_score', models.SmallIntegerField()),
                ('blue_foul_score', models.SmallIntegerField()),
                ('blue_foul_count', models.SmallIntegerField(default=-1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ScoringModel2014',
            fields=[
                ('scoringmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='TBAW.ScoringModel')),
            ],
            options={
                'abstract': False,
            },
            bases=('TBAW.scoringmodel',),
        ),
        migrations.CreateModel(
            name='ScoringModel2015',
            fields=[
                ('scoringmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='TBAW.ScoringModel')),
            ],
            options={
                'abstract': False,
            },
            bases=('TBAW.scoringmodel',),
        ),
        migrations.CreateModel(
            name='ScoringModel2016',
            fields=[
                ('scoringmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='TBAW.ScoringModel')),
                ('red_breach_points', models.SmallIntegerField(default=0, null=True)),
                ('red_capture_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_breach_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_capture_points', models.SmallIntegerField(default=0, null=True)),
                ('red_scale_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_scale_points', models.SmallIntegerField(default=0, null=True)),
                ('red_auton_boulders_low', models.SmallIntegerField(default=0, null=True)),
                ('red_auton_boulders_high', models.SmallIntegerField(default=0, null=True)),
                ('red_auton_boulders_points', models.SmallIntegerField(default=0, null=True)),
                ('red_teleop_boulders_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_auton_boulders_low', models.SmallIntegerField(default=0, null=True)),
                ('blue_auton_boulders_high', models.SmallIntegerField(default=0, null=True)),
                ('blue_auton_boulders_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_teleop_boulders_points', models.SmallIntegerField(default=0, null=True)),
                ('red_auton_crossing_points', models.SmallIntegerField(default=0, null=True)),
                ('red_auton_reach_points', models.SmallIntegerField(default=0, null=True)),
                ('red_teleop_crossing_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_auton_crossing_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_auton_reach_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_teleop_crossing_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_defense1', models.CharField(default='', max_length=20, null=True)),
                ('blue_defense2', models.CharField(default='', max_length=20, null=True)),
                ('blue_defense3', models.CharField(default='', max_length=20, null=True)),
                ('blue_defense4', models.CharField(default='', max_length=20, null=True)),
                ('blue_defense1_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('blue_defense2_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('blue_defense3_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('blue_defense4_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('red_defense1', models.CharField(default='', max_length=20, null=True)),
                ('red_defense2', models.CharField(default='', max_length=20, null=True)),
                ('red_defense3', models.CharField(default='', max_length=20, null=True)),
                ('red_defense4', models.CharField(default='', max_length=20, null=True)),
                ('red_defense1_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('red_defense2_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('red_defense3_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('red_defense4_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('blue_low_bar_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('red_low_bar_cross_count', models.SmallIntegerField(default=0, null=True)),
                ('blue_adjust_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_defenses_breached', models.NullBooleanField(default=False)),
                ('blue_robot1_auto', models.CharField(default='', max_length=20, null=True)),
                ('blue_robot2_auto', models.CharField(default='', max_length=20, null=True)),
                ('blue_robot3_auto', models.CharField(default='', max_length=20, null=True)),
                ('blue_teleop_boulders_high', models.SmallIntegerField(default=0, null=True)),
                ('blue_teleop_boulders_low', models.SmallIntegerField(default=0, null=True)),
                ('blue_teleop_challenge_points', models.SmallIntegerField(default=0, null=True)),
                ('blue_tower_captured', models.NullBooleanField(default=False)),
                ('blue_tower_end_strength', models.SmallIntegerField(default=0, null=True)),
                ('blue_tower_faceA', models.CharField(default='', max_length=20, null=True)),
                ('blue_tower_faceB', models.CharField(default='', max_length=20, null=True)),
                ('blue_tower_faceC', models.CharField(default='', max_length=20, null=True)),
                ('red_adjust_points', models.SmallIntegerField(default=0, null=True)),
                ('red_defenses_breached', models.NullBooleanField(default=False)),
                ('red_robot1_auto', models.CharField(default='', max_length=20, null=True)),
                ('red_robot2_auto', models.CharField(default='', max_length=20, null=True)),
                ('red_robot3_auto', models.CharField(default='', max_length=20, null=True)),
                ('red_teleop_boulders_high', models.SmallIntegerField(default=0, null=True)),
                ('red_teleop_boulders_low', models.SmallIntegerField(default=0, null=True)),
                ('red_teleop_challenge_points', models.SmallIntegerField(default=0, null=True)),
                ('red_tower_captured', models.NullBooleanField(default=False)),
                ('red_tower_end_strength', models.SmallIntegerField(default=0, null=True)),
                ('red_tower_faceA', models.CharField(default='', max_length=20, null=True)),
                ('red_tower_faceB', models.CharField(default='', max_length=20, null=True)),
                ('red_tower_faceC', models.CharField(default='', max_length=20, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('TBAW.scoringmodel',),
        ),
        migrations.AddField(
            model_name='scoringmodel',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_tbaw.scoringmodel_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='match',
            name='scoring_model',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.ScoringModel'),
        ),
        migrations.AlterField(
            model_name='award',
            name='year',
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_district',
            field=models.SmallIntegerField(choices=[(0, 'No District'), (1, 'Michigan'), (2, 'Mid-Atlantic'), (3, 'New England'), (4, 'Pacific Northwest'), (5, 'Indiana'), (6, 'Chesapeake'), (7, 'North Carolina'), (8, 'Georgia')], null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='event_type',
            field=models.SmallIntegerField(choices=[(0, 'Regional'), (1, 'District'), (2, 'District Championship'), (3, 'Championship Division'), (4, 'Championship Finals'), (99, 'Offseason'), (100, 'Preseason'), (-1, 'Unlabeled')], null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='year',
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AddField(
            model_name='scoringmodel',
            name='json_data',
            field=models.TextField(default='', null=True),
        ),
        migrations.AddField(
            model_name='scoringmodel',
            name='blue_tech_foul_count',
            field=models.SmallIntegerField(default=0, null=True),
        ),
        migrations.AddField(
            model_name='scoringmodel',
            name='red_tech_foul_count',
            field=models.SmallIntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='blue_foul_count',
            field=models.SmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='red_foul_count',
            field=models.SmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='blue_auton_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='blue_foul_count',
            field=models.SmallIntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='blue_foul_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='blue_teleop_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='blue_total_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='red_auton_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='red_foul_count',
            field=models.SmallIntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='red_foul_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='red_teleop_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='scoringmodel',
            name='red_total_score',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='alliance',
            name='seed',
            field=models.SmallIntegerField(default=0, null=True),
        ),
        migrations.CreateModel(
            name='RankingModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wins', models.PositiveSmallIntegerField(null=True)),
                ('losses', models.PositiveSmallIntegerField(null=True)),
                ('ties', models.PositiveSmallIntegerField(null=True)),
                ('played', models.PositiveSmallIntegerField(null=True)),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_tbaw.rankingmodel_set+', to='contenttypes.ContentType')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.Team')),
                ('tba_ccwms', models.FloatField(null=True)),
                ('tba_dpr', models.FloatField(null=True)),
                ('tba_opr', models.FloatField(null=True)),
                ('rank', models.PositiveSmallIntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RankingModel2016',
            fields=[
                ('rankingmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='TBAW.RankingModel')),
                ('ranking_score', models.PositiveSmallIntegerField(null=True)),
                ('auton_points', models.PositiveSmallIntegerField(null=True)),
                ('scale_challenge_points', models.PositiveSmallIntegerField(null=True)),
                ('goals_points', models.PositiveSmallIntegerField(null=True)),
                ('defense_points', models.PositiveSmallIntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('TBAW.rankingmodel',),
        ),
        migrations.CreateModel(
            name='RankingModel2015',
            fields=[
                ('rankingmodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='TBAW.RankingModel')),
                ('qual_average', models.FloatField(null=True)),
                ('auton_points', models.PositiveSmallIntegerField(null=True)),
                ('container_points', models.PositiveSmallIntegerField(null=True)),
                ('coopertition_points', models.PositiveSmallIntegerField(null=True)),
                ('litter_points', models.PositiveSmallIntegerField(null=True)),
                ('tote_points', models.PositiveSmallIntegerField(null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('TBAW.rankingmodel',),
        ),
        migrations.AddField(
            model_name='rankingmodel',
            name='event',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.Event'),
        ),
        migrations.AlterField(
            model_name='award',
            name='award_type',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='award',
            name='name',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='event',
            name='location',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='name',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='event',
            name='short_name',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='timezone',
            field=models.CharField(max_length=35, null=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='country_name',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='locality',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='location',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='team',
            name='nickname',
            field=models.CharField(max_length=100),
        ),
        migrations.AlterField(
            model_name='team',
            name='region',
            field=models.CharField(max_length=50, null=True),
        ),
        migrations.AddField(
            model_name='robot',
            name='team',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.Team'),
        ),
        migrations.AlterField(
            model_name='robot',
            name='key',
            field=models.CharField(max_length=13, null=True),
        ),
        migrations.AlterField(
            model_name='robot',
            name='name',
            field=models.CharField(max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='robot',
            name='year',
            field=models.PositiveSmallIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='team',
            name='elo_mu',
            field=models.FloatField(default=25.0),
        ),
        migrations.AddField(
            model_name='team',
            name='elo_sigma',
            field=models.FloatField(default=8.333333333333334),
        ),
        migrations.AddField(
            model_name='event',
            name='end_date',
            field=models.DateField(null=True),
        ),
        migrations.AddField(
            model_name='event',
            name='winning_alliance',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winning_alliance', to='TBAW.Alliance'),
        ),
        migrations.AlterField(
            model_name='team',
            name='location',
            field=models.CharField(max_length=150, null=True),
        ),
        migrations.CreateModel(
            name='AllianceAppearance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('seed', models.PositiveSmallIntegerField(null=True)),
                ('alliance', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.Alliance')),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.Event')),
            ],
        ),
        migrations.RemoveField(
            model_name='alliance',
            name='color',
        ),
        migrations.RemoveField(
            model_name='alliance',
            name='seed',
        ),
        migrations.AlterField(
            model_name='award',
            name='award_type',
            field=models.CharField(choices=[(0, "Chairman's"), (1, 'Winner'), (2, 'Finalist'), (3, 'Woodie Flowers'), (4, "Dean's List"), (5, 'Volunteer'), (6, 'Founders'), (7, 'Bart Kamen Memorial'), (8, 'Make It Loud'), (9, 'Engineering Inspiration'), (10, 'Rookie All Star'), (11, 'Gracious Professionalism'), (12, 'Coopertition'), (13, 'Judges'), (14, 'Highest Rookie Seed'), (15, 'Rookie Inspiration'), (16, 'Industrial Design'), (17, 'Quality'), (18, 'Safety'), (19, 'Sportsmanship'), (20, 'Creativity'), (21, 'Engineering Excellence'), (22, 'Entrepreneurship'), (23, 'Excellence in Design'), (24, 'Excellence in Design (CAD)'), (25, 'Excellence in Design (Animation)'), (26, "Driving Tomorrow's Technology"), (27, 'Imagery'), (28, 'Media and Technology'), (29, 'Innovation in Control'), (30, 'Spirit'), (31, 'Website'), (32, 'Visualization'), (33, 'Autodesk Inventor'), (34, 'Future Innovator'), (35, 'Recognition of Extraordinary Service'), (36, 'Outstanding Cart'), (37, 'WSU Aim Higher'), (38, 'Leadership in Control'), (39, 'Number 1 Seed'), (40, 'Incredible Play'), (41, "People's Choice Animation"), (42, 'Rising Star Visualization'), (43, 'Best Offensive Round'), (44, 'Best Play of the Day'), (45, 'Featherweight in the Finals'), (46, 'Most Photogenic'), (47, 'Outstanding Defense'), (48, 'Power to Simplify'), (49, 'Against All Odds'), (50, 'Rising Star'), (51, "Chairman's Honorable Mention"), (52, 'Content Communication Honorable Mention'), (53, 'Technical Execution Honorable Mention'), (54, 'Realization'), (55, 'Realization Honorable Mention'), (56, 'Design Your Future'), (57, 'Design Your Future Honorable Mention'), (58, 'Special Recognition Character Animation'), (59, 'High Score'), (60, 'Teacher Pioneer'), (61, 'Best Craftsmanship'), (62, 'Best Defensive Match'), (63, 'Play of the Day'), (64, 'Programming'), (65, 'Professionalism'), (66, 'Golden Corndog'), (67, 'Most Improved Team'), (68, 'Wildcard')], max_length=100),
        ),
        migrations.AlterField(
            model_name='award',
            name='name',
            field=models.CharField(max_length=150),
        ),
        migrations.AddField(
            model_name='award',
            name='recipients',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='TBAW.Team'),
        ),
    ]
